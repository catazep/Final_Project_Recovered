/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;


import DataBase.DB_Connection;
import java.sql.Connection;
import Library.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.sql.ResultSet;
import java.sql.SQLException;
import static javax.swing.text.StyleConstants.Bold;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Catalin
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public HomePage() {
        
        
        
        initComponents();
        
        //Add book panel
        HomePanel.setVisible(true);
        BookUpdatePanel.setVisible(false);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
        
        
        this.setTitle("Home page");
        
        // <editor-fold defaultstate="collapsed" desc="update book panel">
        
        UpdateBook.setEnabled(false);
        NewBookID.setEnabled(false);
        NewBookName.setEnabled(false);
        NewBookAuthor.setEnabled(false);
        NewBookType.setEnabled(false);
        // </editor-fold>  
        
        addWindowListener(new WindowAdapter() {
  public void windowClosing(WindowEvent e) {
    int confirmed = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to exit the program?", "Exit Program Message Box",
        JOptionPane.YES_NO_OPTION);

    if (confirmed == JOptionPane.YES_OPTION) {
      System.exit(confirmed);
    }
  }
});
        
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookAddPanel = new javax.swing.JPanel();
        BookID = new javax.swing.JTextField();
        BookName = new javax.swing.JTextField();
        BookAuthor = new javax.swing.JTextField();
        BookType = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        AddBook = new java.awt.Button();
        BookUpdatePanel = new javax.swing.JPanel();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        UpdateBook = new java.awt.Button();
        NewBookID = new javax.swing.JTextField();
        NewBookName = new javax.swing.JTextField();
        NewBookAuthor = new javax.swing.JTextField();
        NewBookType = new javax.swing.JTextField();
        label9 = new java.awt.Label();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        UpdatedBookID = new javax.swing.JTextField();
        CheckBookID = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        BookRemovePanel = new javax.swing.JPanel();
        label12 = new java.awt.Label();
        DeletedBookID = new javax.swing.JTextField();
        CheckBookID1 = new javax.swing.JCheckBox();
        label13 = new java.awt.Label();
        DeleteBook = new java.awt.Button();
        HomePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        ReaderAddPanel = new javax.swing.JPanel();
        label14 = new java.awt.Label();
        label15 = new java.awt.Label();
        AddReader = new java.awt.Button();
        ReaderID = new javax.swing.JTextField();
        ReaderCNP = new javax.swing.JTextField();
        ReaderName = new javax.swing.JTextField();
        ReaderGroup = new javax.swing.JTextField();
        label16 = new java.awt.Label();
        label17 = new java.awt.Label();
        label18 = new java.awt.Label();
        ReaderUpdatePanel = new javax.swing.JPanel();
        NewReaderName = new javax.swing.JTextField();
        NewReaderGroup = new javax.swing.JTextField();
        label19 = new java.awt.Label();
        label20 = new java.awt.Label();
        label21 = new java.awt.Label();
        label22 = new java.awt.Label();
        UpdatedReaderByCNP = new javax.swing.JTextField();
        label23 = new java.awt.Label();
        CheckBoxCNP = new javax.swing.JCheckBox();
        label24 = new java.awt.Label();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        UpdateReader = new java.awt.Button();
        NewReaderID = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        NewReaderCNP = new javax.swing.JTextField();
        UpdatedReaderByID = new javax.swing.JTextField();
        CheckBoxID = new javax.swing.JCheckBox();
        readerIDCheckBox = new javax.swing.JCheckBox();
        readerCNPCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ReaderRemovePanel = new javax.swing.JPanel();
        label25 = new java.awt.Label();
        DeletedReaderID = new javax.swing.JTextField();
        CheckReaderID = new javax.swing.JCheckBox();
        label26 = new java.awt.Label();
        DeleteReader = new java.awt.Button();
        Borrow_Return_Panel = new javax.swing.JPanel();
        LendBox = new javax.swing.JCheckBox();
        ReturnBox = new javax.swing.JCheckBox();
        BookField = new javax.swing.JTextField();
        ReaderField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        Action = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Pages = new javax.swing.JMenu();
        Home = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenu();
        Book = new javax.swing.JMenu();
        Add_Book = new javax.swing.JMenuItem();
        Update_Book = new javax.swing.JMenuItem();
        Remove_Book = new javax.swing.JMenuItem();
        Reader = new javax.swing.JMenu();
        Add_Reader = new javax.swing.JMenuItem();
        Update_Reader = new javax.swing.JMenuItem();
        Remove_Reader = new javax.swing.JMenuItem();
        View = new javax.swing.JMenuItem();
        Actions = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        Refresh = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setLocation(new java.awt.Point(650, 300));
        setResizable(false);

        BookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookIDActionPerformed(evt);
            }
        });

        label1.setText("Book ID");

        label2.setText("Book Name");

        label3.setText("Book Author");

        label4.setText("Book Type");

        label5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label5.setText("Add a new book...");

        AddBook.setLabel("Add Book");
        AddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookAddPanelLayout = new javax.swing.GroupLayout(BookAddPanel);
        BookAddPanel.setLayout(BookAddPanelLayout);
        BookAddPanelLayout.setHorizontalGroup(
            BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookAddPanelLayout.createSequentialGroup()
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BookAddPanelLayout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddBook, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BookAddPanelLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BookType)
                            .addComponent(BookAuthor)
                            .addComponent(BookName)
                            .addComponent(BookID))))
                .addGap(112, 112, 112))
        );
        BookAddPanelLayout.setVerticalGroup(
            BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookAddPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(BookAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        label6.setText("New Book Author");

        label7.setText("New Book Type");

        label8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label8.setText("Update a Book...");

        UpdateBook.setLabel("Update Book");
        UpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBookActionPerformed(evt);
            }
        });

        label9.setText("New Book ID");

        label10.setText("New Book Name");

        label11.setAlignment(java.awt.Label.CENTER);
        label11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label11.setText("Book ID to be changed");

        CheckBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBookIDActionPerformed(evt);
            }
        });

        jTextPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextPane1.setText("Complete this field first !");
        jTextPane1.setDisabledTextColor(new java.awt.Color(0, 51, 51));
        jTextPane1.setEnabled(false);
        jTextPane1.setOpaque(false);
        jScrollPane2.setViewportView(jTextPane1);

        jTextPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextPane2.setText("Complete only the fields to be changed !");
        jTextPane2.setDisabledTextColor(new java.awt.Color(0, 51, 51));
        jTextPane2.setEnabled(false);
        jTextPane2.setOpaque(false);
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout BookUpdatePanelLayout = new javax.swing.GroupLayout(BookUpdatePanel);
        BookUpdatePanel.setLayout(BookUpdatePanelLayout);
        BookUpdatePanelLayout.setHorizontalGroup(
            BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookUpdatePanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookUpdatePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookUpdatePanelLayout.createSequentialGroup()
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                .addGap(247, 247, 247)
                                .addComponent(label8, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateBook, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                            .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(label11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                                    .addComponent(UpdatedBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(CheckBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NewBookID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NewBookType, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NewBookAuthor, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NewBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(84, 84, 84))))
        );
        BookUpdatePanelLayout.setVerticalGroup(
            BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NewBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NewBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(NewBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NewBookType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BookUpdatePanelLayout.createSequentialGroup()
                        .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BookUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBookID)
                            .addComponent(UpdatedBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(106, 106, 106))
        );

        label12.setAlignment(java.awt.Label.CENTER);
        label12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label12.setText("Book ID for Remove");

        CheckBookID1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBookID1ActionPerformed(evt);
            }
        });

        label13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label13.setText("Remove a Book...");

        DeleteBook.setEnabled(false);
        DeleteBook.setLabel("Remove Book");
        DeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookRemovePanelLayout = new javax.swing.GroupLayout(BookRemovePanel);
        BookRemovePanel.setLayout(BookRemovePanelLayout);
        BookRemovePanelLayout.setHorizontalGroup(
            BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookRemovePanelLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(label13, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(159, 159, 159))
            .addGroup(BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(BookRemovePanelLayout.createSequentialGroup()
                    .addGroup(BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(BookRemovePanelLayout.createSequentialGroup()
                            .addGap(198, 198, 198)
                            .addComponent(DeletedBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookRemovePanelLayout.createSequentialGroup()
                            .addGap(204, 204, 204)
                            .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(CheckBookID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(198, Short.MAX_VALUE)))
        );
        BookRemovePanelLayout.setVerticalGroup(
            BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookRemovePanelLayout.createSequentialGroup()
                .addContainerGap(262, Short.MAX_VALUE)
                .addGroup(BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(label13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(75, 75, 75))
            .addGroup(BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(BookRemovePanelLayout.createSequentialGroup()
                    .addGap(145, 145, 145)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(BookRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CheckBookID1)
                        .addComponent(DeletedBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(169, Short.MAX_VALUE)))
        );

        jEditorPane1.setEditable(false);
        jEditorPane1.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jEditorPane1.setText("          \t\t\n\n          This is  java college project application !\n          For any future problem contact an admin !\n          Admins :\n\t->Georgescu Catalin-Marian \n\t->Ibis Alexandra Elena\n\t->Tiper Alexandru\n          \t\tGroup : 251\n");
        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );

        label14.setText("Reader Group");

        label15.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label15.setText("Add a new reader...");

        AddReader.setLabel("Add Reader");
        AddReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddReaderActionPerformed(evt);
            }
        });

        label16.setText("Reader ID");

        label17.setText("Reader CNP");

        label18.setText("Reader Name");

        javax.swing.GroupLayout ReaderAddPanelLayout = new javax.swing.GroupLayout(ReaderAddPanel);
        ReaderAddPanel.setLayout(ReaderAddPanelLayout);
        ReaderAddPanelLayout.setHorizontalGroup(
            ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderAddPanelLayout.createSequentialGroup()
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReaderAddPanelLayout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddReader, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReaderAddPanelLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label18, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(label14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReaderGroup)
                            .addComponent(ReaderName)
                            .addComponent(ReaderCNP)
                            .addComponent(ReaderID))))
                .addGap(112, 112, 112))
        );
        ReaderAddPanelLayout.setVerticalGroup(
            ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReaderAddPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReaderCNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReaderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReaderGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(ReaderAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddReader, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        NewReaderName.setEnabled(false);

        NewReaderGroup.setEnabled(false);

        label19.setText("New Reader ID");

        label20.setText("New Reader CNP");

        label21.setAlignment(java.awt.Label.CENTER);
        label21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label21.setText("Chose one of these fields !");

        label22.setText("New Reader Name");

        UpdatedReaderByCNP.setEnabled(false);
        UpdatedReaderByCNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatedReaderByCNPActionPerformed(evt);
            }
        });

        label23.setText("New Reader Group");

        CheckBoxCNP.setEnabled(false);
        CheckBoxCNP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxCNPActionPerformed(evt);
            }
        });

        label24.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label24.setText("Update a Reader...");

        jTextPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextPane3.setText("Complete these fields first !");
        jTextPane3.setDisabledTextColor(new java.awt.Color(0, 51, 51));
        jTextPane3.setEnabled(false);
        jTextPane3.setOpaque(false);
        jScrollPane4.setViewportView(jTextPane3);

        UpdateReader.setEnabled(false);
        UpdateReader.setLabel("Update Reader");
        UpdateReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateReaderActionPerformed(evt);
            }
        });

        NewReaderID.setEnabled(false);

        jTextPane4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextPane4.setText("Complete only the fields to be changed !");
        jTextPane4.setDisabledTextColor(new java.awt.Color(0, 51, 51));
        jTextPane4.setEnabled(false);
        jTextPane4.setOpaque(false);
        jScrollPane5.setViewportView(jTextPane4);

        NewReaderCNP.setEnabled(false);

        UpdatedReaderByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatedReaderByIDActionPerformed(evt);
            }
        });

        CheckBoxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxIDActionPerformed(evt);
            }
        });

        readerIDCheckBox.setSelected(true);
        readerIDCheckBox.setText("ID");
        readerIDCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readerIDCheckBoxActionPerformed(evt);
            }
        });

        readerCNPCheckBox.setText("CNP");
        readerCNPCheckBox.setEnabled(false);
        readerCNPCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readerCNPCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("ID");

        jLabel2.setText("CNP");

        javax.swing.GroupLayout ReaderUpdatePanelLayout = new javax.swing.GroupLayout(ReaderUpdatePanel);
        ReaderUpdatePanel.setLayout(ReaderUpdatePanelLayout);
        ReaderUpdatePanelLayout.setHorizontalGroup(
            ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderUpdatePanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderUpdatePanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(label24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderUpdatePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderUpdatePanelLayout.createSequentialGroup()
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                        .addComponent(readerIDCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(readerCNPCheckBox))
                                    .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                        .addComponent(UpdatedReaderByID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CheckBoxID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(UpdatedReaderByCNP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckBoxCNP, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                .addComponent(label19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NewReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(label23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NewReaderName, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NewReaderCNP, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NewReaderGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(75, 75, 75))))
        );
        ReaderUpdatePanelLayout.setVerticalGroup(
            ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(label20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NewReaderCNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NewReaderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBoxID)
                            .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(UpdatedReaderByID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(NewReaderGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBoxCNP)
                            .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(UpdatedReaderByCNP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateReader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111))
                    .addGroup(ReaderUpdatePanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(ReaderUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(readerIDCheckBox)
                            .addComponent(readerCNPCheckBox))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        label25.setAlignment(java.awt.Label.CENTER);
        label25.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label25.setText("Reader ID for Remove");

        CheckReaderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckReaderIDActionPerformed(evt);
            }
        });

        label26.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label26.setText("Remove a Book...");

        DeleteReader.setEnabled(false);
        DeleteReader.setLabel("Remove Reader");
        DeleteReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteReaderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReaderRemovePanelLayout = new javax.swing.GroupLayout(ReaderRemovePanel);
        ReaderRemovePanel.setLayout(ReaderRemovePanelLayout);
        ReaderRemovePanelLayout.setHorizontalGroup(
            ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReaderRemovePanelLayout.createSequentialGroup()
                .addGroup(ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReaderRemovePanelLayout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(label26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(DeleteReader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ReaderRemovePanelLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addGroup(ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ReaderRemovePanelLayout.createSequentialGroup()
                                .addComponent(DeletedReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        ReaderRemovePanelLayout.setVerticalGroup(
            ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReaderRemovePanelLayout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckReaderID)
                    .addGroup(ReaderRemovePanelLayout.createSequentialGroup()
                        .addComponent(DeletedReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(54, 54, 54)
                .addGroup(ReaderRemovePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DeleteReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label26, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addGap(81, 81, 81))
        );

        LendBox.setSelected(true);
        LendBox.setText("Return");
        LendBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LendBoxActionPerformed(evt);
            }
        });

        ReturnBox.setText("Lend");
        ReturnBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnBoxActionPerformed(evt);
            }
        });

        ReaderField.setEnabled(false);
        ReaderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReaderFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Book ID");

        jLabel4.setText("Reader ID");

        jEditorPane2.setText("Check \"Lend\" box and complete \"Book ID\" field and \"Reader ID\" field to lend a book or \"Return\" box and Book ID field to finish borrowing of a book.");
        jEditorPane2.setEnabled(false);
        jScrollPane6.setViewportView(jEditorPane2);

        Action.setText("Done !");
        Action.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Borrow_Return_PanelLayout = new javax.swing.GroupLayout(Borrow_Return_Panel);
        Borrow_Return_Panel.setLayout(Borrow_Return_PanelLayout);
        Borrow_Return_PanelLayout.setHorizontalGroup(
            Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Borrow_Return_PanelLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Borrow_Return_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Borrow_Return_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(ReaderField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Borrow_Return_PanelLayout.createSequentialGroup()
                            .addComponent(LendBox, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReturnBox))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Borrow_Return_PanelLayout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(BookField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(112, 112, 112)
                .addComponent(Action)
                .addGap(214, 214, 214))
        );
        Borrow_Return_PanelLayout.setVerticalGroup(
            Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Borrow_Return_PanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LendBox)
                    .addComponent(ReturnBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Action))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Borrow_Return_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReaderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );

        Pages.setText("Pages");

        Home.setText("Home");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });
        Pages.add(Home);

        jMenuBar1.add(Pages);

        Options.setText("Options");

        Book.setText("Book");

        Add_Book.setText("Add");
        Add_Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_BookActionPerformed(evt);
            }
        });
        Book.add(Add_Book);

        Update_Book.setText("Update");
        Update_Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_BookActionPerformed(evt);
            }
        });
        Book.add(Update_Book);

        Remove_Book.setText("Remove");
        Remove_Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_BookActionPerformed(evt);
            }
        });
        Book.add(Remove_Book);

        Options.add(Book);

        Reader.setText("Reader");

        Add_Reader.setText("Add");
        Add_Reader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_ReaderActionPerformed(evt);
            }
        });
        Reader.add(Add_Reader);

        Update_Reader.setText("Update");
        Update_Reader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_ReaderActionPerformed(evt);
            }
        });
        Reader.add(Update_Reader);

        Remove_Reader.setText("Remove");
        Remove_Reader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_ReaderActionPerformed(evt);
            }
        });
        Reader.add(Remove_Reader);

        Options.add(Reader);

        View.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });
        Options.add(View);

        jMenuBar1.add(Options);

        Actions.setText("Actions");

        jMenuItem1.setText("Borrow/Return");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Actions.add(jMenuItem1);

        jMenuItem2.setText("Search");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Actions.add(jMenuItem2);

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        Actions.add(Refresh);

        jMenuBar1.add(Actions);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BookAddPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(BookUpdatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(BookRemovePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(HomePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderAddPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderUpdatePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderRemovePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Borrow_Return_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BookAddPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(BookUpdatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(BookRemovePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(HomePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderAddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderUpdatePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ReaderRemovePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Borrow_Return_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Remove_BookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_BookActionPerformed
        BookRemovePanel.setVisible(true);
        BookAddPanel.setVisible(false);
        BookUpdatePanel.setVisible(false);
        HomePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
        
        
    }//GEN-LAST:event_Remove_BookActionPerformed

    
    
    private void Add_BookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_BookActionPerformed
        BookAddPanel.setVisible(true);
        BookUpdatePanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        HomePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
        
    }//GEN-LAST:event_Add_BookActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        
        
        view.setVisible(false);
        view=null;
        
        view=new View();
        
        view.setLocation(this.getX()+100, this.getY()+200);
        view.setVisible(true);
    }//GEN-LAST:event_ViewActionPerformed

    private void Update_BookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_BookActionPerformed
        BookUpdatePanel.setVisible(true);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        HomePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
    }//GEN-LAST:event_Update_BookActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        HomePanel.setVisible(true);
        BookUpdatePanel.setVisible(false);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
    }//GEN-LAST:event_HomeActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        
       
        
        //refresh view
        view.setVisible(false);
        view=null;
        view=new View();
        view.setLocation(this.getX()+100, this.getY()+200);
        view.setVisible(true);
    }//GEN-LAST:event_RefreshActionPerformed

    private void AddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookActionPerformed
            String bookID=BookID.getText();
            String bookName=BookName.getText();
            String bookAuthor=BookAuthor.getText();
            String bookType=BookType.getText();
            boolean check=true;
            int iBookID=-100;//0 is too risky for a db
            try
            {
                 iBookID=Integer.parseInt(bookID);
            }
            catch(Exception e)
            {
                check=false;
            }
           
            
            if(bookID.equals("")||bookName.equals("")||bookAuthor.equals("")||bookType.equals(""))
            {
                
                JOptionPane.showMessageDialog (null, "Please complete all fields !"
                        , "Warning", JOptionPane.WARNING_MESSAGE);

                
            }
            else if(check==false)
                {
                    
                JOptionPane.showMessageDialog (null, "Id of the book must be an integer valid number !", "Warning", JOptionPane.WARNING_MESSAGE);

                }
            else if(Integer.parseInt(bookID)<1)
            {
                JOptionPane.showMessageDialog (null, 
                    "Book ID must be highere than 0 !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else 
            {
                try
                {
                    Library.Book book = new Book(iBookID,bookName,bookAuthor,bookType);
                    
                    
                    
                    
                        
                    
                    
                    
                    
                    

                }
                catch(Exception e)
                {
                    
                    JOptionPane.showMessageDialog (null, "A seriosu problem has occured !\n"
                            +"Please contact an admin !", "Warning", JOptionPane.WARNING_MESSAGE);

                    
                }
            }
            
    
            
    }//GEN-LAST:event_AddBookActionPerformed

    
    // <editor-fold defaultstate="collapsed" desc="Update Button">  
    private void UpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBookActionPerformed
        
            try
            {
                Connection connection = DB_Connection.InitializeConnection();
                
                if(connection!=null)
                {
                    String updatedBookID = UpdatedBookID.getText();
                    
                    ResultSet resultSet = Library.Book.SearchBookByID(Integer.parseInt(updatedBookID));
                    
                    if(!resultSet.next())
                    {
                        JOptionPane.showMessageDialog (null,"Book not found !", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {
                        boolean check=true;
                        try
                        {
                            int newBookIDCheck=Integer.parseInt(NewBookID.getText());
                            
                        }
                        catch(Exception e)
                        {
                            check=false;
                            //System.out.println(check);
                          
                        }
                        
                        
                        String newBookID=NewBookID.getText();
                        String newBookName=NewBookName.getText();
                        String newBookAuthor=NewBookAuthor.getText();
                        String newBookType=NewBookType.getText();
                        
                            
                         if(NewBookID.getText().equals(""))
                         {
                            
                            if(!newBookName.equals(""))
                            {
                                Library.Book.UpdateBookName(Integer.parseInt(updatedBookID), newBookName);
                            }
                            if(!newBookAuthor.equals(""))
                            {
                                Library.Book.UpdateBookAuthor(Integer.parseInt(updatedBookID), newBookAuthor);
                            }
                            if(!newBookType.equals(""))
                            {
                                Library.Book.UpdateBookType(Integer.parseInt(updatedBookID), newBookType);
                            }
                            if(newBookID.equals("")&&newBookName.equals("")&&
                                                newBookAuthor.equals("")&&newBookType.equals(""))
                            {
                                JOptionPane.showMessageDialog (null,"   There is nothing to change !", "Warning", JOptionPane.WARNING_MESSAGE);
                                           
                                        //view.jTable1.updateUI();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog (null,"   Book has been updated !", "", JOptionPane.INFORMATION_MESSAGE);
                                        //view.jTable1.updateUI();
                                
                            }
                            
                            
                            
                         }
                         else if(!NewBookID.getText().equals(""))
                         {
                                if(check==false)
                                {
                                    JOptionPane.showMessageDialog (null,"   Invalid book ID !\n  The book has not been updated !", "Error", JOptionPane.WARNING_MESSAGE);
                                }
                                else if(Integer.parseInt(newBookID)<1)
                                {
                                    JOptionPane.showMessageDialog (null,"The new book ID must be highere than 0 !\n The book has not been updated !", "Error", JOptionPane.WARNING_MESSAGE);
                                }
                                
                                else
                                {
                                    Library.Book book=Library.Book.ExtractBookDatas(Integer.parseInt(newBookID));
                                    
                                    
                                    if(book.GetBookID()!=0)
                                    {
                                        JOptionPane.showMessageDialog (null,"The Id is already used !", "Error", JOptionPane.WARNING_MESSAGE);
                                    }
                                    else
                                    {
                                        
                                        if(!newBookName.equals(""))
                                        {
                                            Library.Book.UpdateBookName(Integer.parseInt(updatedBookID), newBookName);
                                        }
                                        if(!newBookAuthor.equals(""))
                                        {
                                            Library.Book.UpdateBookAuthor(Integer.parseInt(updatedBookID), newBookAuthor);
                                        }
                                        if(!newBookType.equals(""))
                                        {
                                            Library.Book.UpdateBookType(Integer.parseInt(updatedBookID), newBookType);
                                        }
                                        if(!newBookID.equals(""))
                                        {
                                            Library.Book.UpdateBookID(Integer.parseInt(updatedBookID), Integer.parseInt(newBookID));
                                        }
                                        
                                            JOptionPane.showMessageDialog (null,"   The book has been updated !", "", JOptionPane.INFORMATION_MESSAGE);
                                            
                                        
                                        
                                        
                                    }
                                }
                                
                         }
                   
                    }
                    //DO the staff
                    
                    
                }
                //else nothing(the progrm manage the messages already)
            }
            catch(Exception ex)
            {
                
            }
        
        
    }//GEN-LAST:event_UpdateBookActionPerformed
// </editor-fold>  
    
    
    
    private void CheckBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBookIDActionPerformed
        
        
        int checkBookID;
        if(CheckBookID.isSelected()==true)
        {
                try
            {
                checkBookID = Integer.parseInt(UpdatedBookID.getText());

            }
            catch (NumberFormatException e)
            {
                checkBookID=-100;
            }
        
            //System.out.println(checkReaderID);
        
        
          if(UpdatedBookID.getText().equals(""))
            {
                CheckBookID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Complete the ID field !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
                
            }
            else if(checkBookID<1&&checkBookID!=-100)
            {
                CheckBookID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Book ID must be highere than 0 !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(checkBookID==-100)
            {
                CheckBookID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Invalid Book ID !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
            }
          
          else
            {
                
                NewBookID.setEnabled(true);
                NewBookName.setEnabled(true);
                NewBookAuthor.setEnabled(true);
                NewBookType.setEnabled(true);
                UpdatedBookID.setEnabled(false);
                UpdateBook.setEnabled(true);
                
            }
        
        }
        else if(CheckBookID.isSelected()==false)
        {
            ;
            NewBookID.setEnabled(false);
            NewBookName.setEnabled(false);
            NewBookAuthor.setEnabled(false);
            NewBookType.setEnabled(false);
            UpdatedBookID.setEnabled(true);
            UpdateBook.setEnabled(false);
        }
        
        
            
    }//GEN-LAST:event_CheckBookIDActionPerformed

    private void CheckBookID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBookID1ActionPerformed
        
     if(CheckBookID.isSelected()==false)
     {
        int checkBookID;
        try
        {
            checkBookID=Integer.parseInt(DeletedBookID.getText());
        }
        catch (NumberFormatException e)
        {
            checkBookID=-100;
        }
        
        
        
        if(checkBookID!=-100)
        {
            if(CheckBookID1.isSelected()==true && Integer.parseInt(DeletedBookID.getText())>0)
            {
                 
                    DeleteBook.setEnabled(true);
                    DeletedBookID.setEnabled(false);
                  
            }
            else if(CheckBookID1.isSelected()==true)
            {
                DeleteBook.setEnabled(false);
                DeletedBookID.setEnabled(true);
                CheckBookID1.setSelected(false);
                JOptionPane.showMessageDialog (null, "Book ID must be higher than 0 ! "
                    , "Error", JOptionPane.WARNING_MESSAGE);
                
            }
            else
            {
                DeleteBook.setEnabled(false);
                DeletedBookID.setEnabled(true);
            }
        }
        else
        {
                DeleteBook.setEnabled(false);
                DeletedBookID.setEnabled(true);
                CheckBookID1.setSelected(false);
                JOptionPane.showMessageDialog (null, "Invalid Book ID ! \n "
                    , "Error", JOptionPane.WARNING_MESSAGE);
        }
    } 
    else  if(CheckBookID.isSelected()==false)
        {
                DeleteBook.setEnabled(false);
                DeletedBookID.setEnabled(true);
                CheckBookID.setSelected(false);
        }
        
        
    }//GEN-LAST:event_CheckBookID1ActionPerformed

    private void DeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookActionPerformed
        try
        {
            ResultSet resultSet=Library.Book.SearchBookByID(Integer.parseInt(DeletedBookID.getText()));
            if(resultSet.next())
            {
                Library.Book.DeletBook(Integer.parseInt(DeletedBookID.getText()));
            }
            else
            {
                JOptionPane.showMessageDialog (null, "Book not found !", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (SQLException ex)
        {
            //System.out.println("Here");
            //Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteBookActionPerformed

    private void Add_ReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_ReaderActionPerformed
        
        ReaderAddPanel.setVisible(true);
        HomePanel.setVisible(false);
        BookUpdatePanel.setVisible(false);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
    }//GEN-LAST:event_Add_ReaderActionPerformed

    private void Update_ReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_ReaderActionPerformed
        
        ReaderUpdatePanel.setVisible(true);
        ReaderAddPanel.setVisible(false);
        HomePanel.setVisible(false);
        BookUpdatePanel.setVisible(false);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
    }//GEN-LAST:event_Update_ReaderActionPerformed

    private void Remove_ReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_ReaderActionPerformed
        
        ReaderRemovePanel.setVisible(true);
        ReaderUpdatePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        HomePanel.setVisible(false);
        BookUpdatePanel.setVisible(false);   
        BookAddPanel.setVisible(false);
        BookRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
        
    }//GEN-LAST:event_Remove_ReaderActionPerformed

    private void AddReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddReaderActionPerformed
            String readerID=ReaderID.getText();
            String readerName=ReaderName.getText();
            String readerCNP=ReaderCNP.getText();
            String readerGroup=ReaderGroup.getText();
            boolean checkID=true;
            boolean checkGroup=true;
            boolean checkCNP=true;
            
            for(int i=0;i<readerCNP.length();i++)
            {
               try
               {    
                   Integer.parseInt(readerCNP.substring(i, i+1));
                   
                   
               }
               catch(Exception e)
               {
                   checkCNP=false;
                   break;
               }
                
            }
            
            
            int iReaderID=-100;//0 is too risky for a db
            
            int iReaderGroup=-100;
            
            
            //check that reader ID is integer
            try
            {
                 iReaderID=Integer.parseInt(readerID);
            }
            catch(Exception e)
            {
                checkID=false;
            }
           
            
            
            
            //check that reader Group is integer
            try
            {
                 iReaderGroup=Integer.parseInt(readerGroup);
            }
            catch(Exception e)
            {
                checkGroup=false;
            }
            
            
            
            if(readerID.equals("")||readerName.equals("")||readerGroup.equals("")||readerCNP.equals(""))
            {
                
                JOptionPane.showMessageDialog (null, "Please complete all fields !"
                        , "Warning", JOptionPane.WARNING_MESSAGE);

                
            }//check reader ID validity
            else if(checkID==false)
                {
                    
                JOptionPane.showMessageDialog (null, "Id of the reader must be an integer valid number !", "Warning", JOptionPane.WARNING_MESSAGE);

                }
            else if(Integer.parseInt(readerID)<1)
            {
                JOptionPane.showMessageDialog (null, 
                    "Reader ID must be highere than 0 !", "Warning", JOptionPane.WARNING_MESSAGE);
            }//check reader CNP validity
            
            else if(checkGroup==false)
                {
                    
                JOptionPane.showMessageDialog (null, "Group of the reader must be an integer valid number !", "Warning", JOptionPane.WARNING_MESSAGE);

                }
            else if(Integer.parseInt(readerGroup)<1)
            {
                JOptionPane.showMessageDialog (null, 
                    "Reader Group must be highere than 0 !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(readerCNP.length()!=13||checkCNP==false)
            {
                if(readerCNP.length()<13)
                //eventualy a better check for CNP
                JOptionPane.showMessageDialog (null, 
                    "Too short CNP !", "Warning", JOptionPane.WARNING_MESSAGE);
                else if(readerCNP.length()>13)
                {
                    JOptionPane.showMessageDialog (null, 
                    "Too long CNP !", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                else if(checkCNP==false)
                {
                    JOptionPane.showMessageDialog (null, 
                    "The CNP must be an integer poisitive number !", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
            else 
            {
                try
                {
                    Library.Reader reader = new Reader(iReaderID,readerCNP,readerName,iReaderGroup);
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    

                }
                catch(Exception e)
                {
                    
                    JOptionPane.showMessageDialog (null, "A seriosu problem has occured !\n"
                            +"Please contact an admin !", "Warning", JOptionPane.WARNING_MESSAGE);

                    
                }
            }
    }//GEN-LAST:event_AddReaderActionPerformed

    private void BookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookIDActionPerformed

    private void CheckBoxCNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxCNPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckBoxCNPActionPerformed

    private void UpdateReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateReaderActionPerformed
           
        if(CheckBoxID.isSelected()==true)
        {   
            String newReaderID=NewReaderID.getText();
            String newReaderCNP=NewReaderCNP.getText();
            String newReaderName=NewReaderName.getText();
            String newReaderGroup=NewReaderGroup.getText();
            
            int iNewReaderID=-200;
            int iNewReaderGroup=-200;
            
            boolean checkCNP=true;
            
            if(!newReaderCNP.equals(""))
            for(int i=0;i<newReaderCNP.length();i++)
            {
               try
               {    
                   Integer.parseInt(newReaderCNP.substring(i, i+1));
                   
                   
               }
               catch(Exception e)
               {
                   checkCNP=false;
                   break;
               }
                
            }
            
            
            
            
            //convert to int ID
            if(!NewReaderID.getText().equals(""))
            try
            {
                iNewReaderID=Integer.parseInt(NewReaderID.getText());
            }
            catch(Exception e)
            {
                iNewReaderID=-100;
            }
            
            
            //convert to int group 
            if(!NewReaderGroup.getText().equals(""))
            try
            {
                iNewReaderGroup=Integer.parseInt(NewReaderGroup.getText());
            }
            catch(Exception e)
            {
                iNewReaderGroup=-100;
            }
            
            
            
            if(iNewReaderID==-100)
            {
                JOptionPane.showMessageDialog (null, "Invalid reader ID !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(iNewReaderID<0&&!NewReaderID.getText().equals(""))//it starts as - 200
            {
                JOptionPane.showMessageDialog (null, "The ID must be a positive integer value !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(iNewReaderGroup==-100)
            {
                JOptionPane.showMessageDialog (null, "Invalid reader Group !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(iNewReaderGroup<0&&!NewReaderGroup.getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "The group must be a positive integer value !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(newReaderCNP.length()<13&&!NewReaderCNP.getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "The CNP is too short !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(newReaderCNP.length()>13&&!NewReaderCNP.getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "The CNP is too long !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(checkCNP==false&&!NewReaderCNP.getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "The CNP is invalid !", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                try
                {
                    
                    
                    if(!newReaderCNP.equals("") )
                    {
                        Library.Reader.UpdateReaderCNP(Integer.parseInt(UpdatedReaderByID.getText()), newReaderCNP);
                         
                    }
                    if(!newReaderName.equals(""))
                    {
                        Library.Reader.UpdateReaderName(Integer.parseInt(UpdatedReaderByID.getText()), newReaderName);
                    }
                    
                    if(!newReaderGroup.equals(""))
                    {
                        Library.Reader.UpdateReaderGroup(Integer.parseInt(UpdatedReaderByID.getText()), iNewReaderGroup);
                    }
                    
                    if(!newReaderID.equals("") )//&& OK==true
                    {
                        
                            Library.Reader.UpdateReaderID(Integer.parseInt(UpdatedReaderByID.getText()), iNewReaderID);
                            
                        
                    }
                    
                    
                        //JOptionPane.showMessageDialog (null, "The reader has been updated !", "", JOptionPane.INFORMATION_MESSAGE);
                    
                    
                }
                catch(Exception e)
                {
                    //nothing
                }
                
                
                
            }
            
            
            
            
        }
            
            /*if()
            {
                
            }
            else if()
            {
                
            }
            else if()
            {
            
            }*/
            
            
            
            
            
            
        /*}
        else if(CheckBoxCNP.isSelected()==false)
        {
            
        }*/
        
        
        
        
        
        
        
        
        
        /*if(CheckBoxID.isSelected()==true)
           {
               try
            {
                Connection connection = DB_Connection.InitializeConnection();
                
                if(connection!=null)
                {
                    String updatedReaderByID = UpdatedReaderByID.getText();
                    
                    ResultSet resultSet = Library.Reader.SearchReaderByID(Integer.parseInt(updatedReaderByID));
                    
                    if(!resultSet.next())
                    {
                        JOptionPane.showMessageDialog (null,"Reader not found !", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {
                        boolean check=true;
                        if(!NewReaderID.getText().equals(""))
                        try
                        {
                            int newReaderIDCheck=Integer.parseInt(NewReaderID.getText());
                            
                        }
                        catch(Exception e)
                        {
                            check=false;
                            //System.out.println(check);
                          
                        }
                        
                        
                        
                        int readerID=Integer.parseInt(updatedReaderByID);
                        String newReaderID=NewReaderID.getText();
                        String newReaderCNP=NewReaderCNP.getText();
                        String newReaderName=NewReaderName.getText();
                        int newReaderGroup=Integer.parseInt(NewReaderGroup.getText());
                        
                            
                        
                        
                        
                        boolean checkCNP=true;
                        for(int i=0;i<newReaderCNP.length();i++)
                        {
                            try
                            {    
                                Integer.parseInt(newReaderCNP.substring(i, i+1));
                   
                   
                            }
                            catch(Exception e)
                            {
                                checkCNP=false;
                                break;
                            }
                            
                        }
                        
                        
                        
                         if(NewReaderID.getText().equals(""))
                         {
                             if(NewReaderCNP.getText().equals(""))
                             {
                                 resultSet=Library.Reader.SearchReaderByCNP(newReaderCNP);
                             }
                             
                            if(resultSet.next()&&checkCNP==false)
                            {
                                if(newReaderCNP.length()<13)
                                        JOptionPane.showMessageDialog (null,"The CNP is too short !", "Error", JOptionPane.WARNING_MESSAGE);
                                        //view.jTable1.updateUI();
                                else if(newReaderCNP.length()>13)
                                        JOptionPane.showMessageDialog (null,"The CNP is too long !", "Error", JOptionPane.WARNING_MESSAGE);
                                else if(checkCNP==false)
                                        JOptionPane.showMessageDialog (null,"The CNP is not valid ! ", "Error ", JOptionPane.WARNING_MESSAGE);
                                
                                
                            }
                            else if(resultSet.next())
                            {
                                JOptionPane.showMessageDialog (null,"This CNP already exist !\n "
                                        + "The changes have not succeeded !"
                                        +"There might be a duplicate person in the database...\n", "", JOptionPane.WARNING_MESSAGE);
                                        //view.jTable1.updateUI();
                            }
                             else
                             {
                                 if(!newReaderCNP.equals(""))
                                {
                                Library.Reader.UpdateReaderCNP(readerID, newReaderCNP);
                                }
                                if(!newReaderName.equals(""))
                                {
                                Library.Reader.UpdateReaderName(readerID, newReaderName);
                                }
                                if(!NewBookType.getText().equals(""))           //the variable is an integer and I dont wnat to compare it with 0
                                {
                                Library.Reader.UpdateReaderGroup(readerID, newReaderGroup);
                                }
                                if(NewReaderID.getText().equals("")&&newReaderCNP.equals("")&&
                                                newReaderName.equals("")&&NewReaderGroup.getText().equals(""))
                                {
                                JOptionPane.showMessageDialog (null,"   There is nothing to change !", "Warning", JOptionPane.WARNING_MESSAGE);
                                            
                                        //view.jTable1.updateUI();
                                }
                                else
                                {
                                JOptionPane.showMessageDialog (null,"   Reader has been updated !", "", JOptionPane.INFORMATION_MESSAGE);
                                        //view.jTable1.updateUI();
                                }
                             }
                             
                             
                            
                            
                            
                            
                         }
                         else
                         {
                                if(check==false)
                                {
                                    JOptionPane.showMessageDialog (null,"   Invalid reader ID !\n  The book has not been updated !", "Error", JOptionPane.WARNING_MESSAGE);
                                }
                                        else if(Integer.parseInt(newReaderID)<1)
                                {
                                    JOptionPane.showMessageDialog (null,"The new reader ID must be highere than 0 !\n The book has not been updated !", "Error", JOptionPane.WARNING_MESSAGE);
                                }
                                
                                else
                                {
                                    //cheking for existence of id and CNP of the reader
                                    Library.Reader reader=Library.Reader.ExtractReaderDatas(Integer.parseInt(newReaderID));
                                    Library.Reader reader1=Library.Reader.ExtractReaderDatas(Integer.parseInt(newReaderCNP));
                                    
                                    
                                    
                                    if(reader.GetReaderID()!=0)
                                    {
                                        JOptionPane.showMessageDialog (null,"The ID is already used !", "Error", JOptionPane.WARNING_MESSAGE);
                                    }
                                    else if(reader1.GetReaderID()!=0)
                                    {
                                        JOptionPane.showMessageDialog (null,"The CNP is already used !", "Error", JOptionPane.WARNING_MESSAGE);
                                    }
                                    else
                                    {
                                        
                                        if(!newReaderName.equals(""))
                                        {
                                        Library.Reader.UpdateReaderName(Integer.parseInt(updatedReaderByID), newReaderName);
                                        }
                                        if(!NewBookAuthor.getText().equals(""))
                                        {
                                        Library.Reader.UpdateReaderGroup(Integer.parseInt(updatedReaderByID), newReaderGroup);
                                        }
                                        if(!newReaderCNP.equals(""))
                                        {
                                        Library.Reader.UpdateReaderCNP(Integer.parseInt(updatedReaderByID), newReaderCNP);
                                        }
                                        if(!NewBookID.getText().equals(""))
                                        {
                                        Library.Reader.UpdateReaderID(Integer.parseInt(updatedReaderByID), Integer.parseInt(newReaderID));
                                        }
                                        
                                            JOptionPane.showMessageDialog (null,"   There is nothing to change !", "Warning", JOptionPane.WARNING_MESSAGE);
                                            
                                        
                                        
                                        
                                    }
                                }
                                
                         }
                   
                    }
                    //DO the staff
                    
                    
                }
                //else nothing(the progrm manage the messages already)
            }
            catch(Exception ex)
            {
                
            }
           }
           else if(CheckBoxCNP.isSelected()==true)
           {
               ///Newxt part of code
           }
           else
           {
               JOptionPane.showMessageDialog (null, "A seriosu problem has occured !\n"
                            +"Please contact an admin !", "Warning", JOptionPane.WARNING_MESSAGE);
           }*/
            
    }//GEN-LAST:event_UpdateReaderActionPerformed

    private void CheckBoxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxIDActionPerformed
        int checkReaderID;
        if(CheckBoxID.isSelected()==true)
        {
                try
            {
                checkReaderID = Integer.parseInt(UpdatedReaderByID.getText());

            }
            catch (NumberFormatException e)
            {
                checkReaderID=-100;
            }
        
            //System.out.println(checkReaderID);
        
        
          if(UpdatedReaderByID.getText().equals(""))
            {
                CheckBoxID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Complete the Reader ID field !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
                
            }
            else if(checkReaderID<1&&checkReaderID!=-100)
            {
                CheckBoxID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Reader ID must be highere than 0 !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(checkReaderID==-100)
            {
                CheckBoxID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Invalid Reader ID !"
                    , "Warning", JOptionPane.WARNING_MESSAGE);
            }
          
          
          else
            {
                UpdateReader.setEnabled(true);
                NewReaderID.setEnabled(true);
                NewReaderCNP.setEnabled(true);
                NewReaderName.setEnabled(true);
                NewReaderGroup.setEnabled(true);
                UpdatedReaderByID.setEnabled(false);
                
            }
        
        }
        else if(CheckBoxID.isSelected()==false)
        {
            UpdateReader.setEnabled(false);
            NewReaderID.setEnabled(false);
            NewReaderCNP.setEnabled(false);
            NewReaderName.setEnabled(false);
            NewReaderGroup.setEnabled(false);
            UpdatedReaderByID.setEnabled(true);
        }
        
        
        
        
        
            
            
            
           
            
            
        
    }//GEN-LAST:event_CheckBoxIDActionPerformed

    private void UpdatedReaderByCNPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatedReaderByCNPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdatedReaderByCNPActionPerformed

    private void readerCNPCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readerCNPCheckBoxActionPerformed
        
        if(readerCNPCheckBox.isSelected()==true)
        {
            readerIDCheckBox.setEnabled(false);
            
            UpdatedReaderByID.setEnabled(false);
            CheckBoxID.setEnabled(false);
            UpdatedReaderByCNP.setEnabled(true);
            CheckBoxCNP.setEnabled(true);
            NewReaderID.setEnabled(false);
            NewReaderCNP.setEnabled(false);
            NewReaderName.setEnabled(false);
            NewReaderGroup.setEnabled(false);
        }
        
        if(readerCNPCheckBox.isSelected()==false)
        {
            UpdateReader.setEnabled(false);
            UpdatedReaderByID.setText(null);
            UpdatedReaderByCNP.setText(null);
            readerIDCheckBox.setEnabled(true);
            CheckBoxCNP.setSelected(false);
            CheckBoxID.setSelected(false);
            readerIDCheckBox.setSelected(false);
            UpdatedReaderByID.setEnabled(false);
            CheckBoxID.setEnabled(false);
            UpdatedReaderByCNP.setEnabled(false);
            CheckBoxCNP.setEnabled(false);
            NewReaderID.setEnabled(false);
            NewReaderCNP.setEnabled(false);
            NewReaderName.setEnabled(false);
            NewReaderGroup.setEnabled(false);
        }
        
        
        
        
        
        
    }//GEN-LAST:event_readerCNPCheckBoxActionPerformed

    private void readerIDCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readerIDCheckBoxActionPerformed
        
        
        
        if(readerIDCheckBox.isSelected()==true)
        {
            readerCNPCheckBox.setEnabled(false);
            
            UpdatedReaderByID.setEnabled(true);
            CheckBoxID.setEnabled(true);
            UpdatedReaderByCNP.setEnabled(false);
            CheckBoxCNP.setEnabled(false);
            NewReaderID.setEnabled(false);
            NewReaderCNP.setEnabled(false);
            NewReaderName.setEnabled(false);
            NewReaderGroup.setEnabled(false);
        }
        
        
        if(readerIDCheckBox.isSelected()==false)
        {   UpdateReader.setEnabled(false);
            UpdatedReaderByID.setText(null);
            UpdatedReaderByCNP.setText(null);
            readerCNPCheckBox.setEnabled(true);
            CheckBoxCNP.setSelected(false);
            CheckBoxID.setSelected(false);
            UpdatedReaderByID.setEnabled(false);
            CheckBoxID.setEnabled(false);
            UpdatedReaderByCNP.setEnabled(false);
            CheckBoxCNP.setEnabled(false);
            NewReaderID.setEnabled(false);
            NewReaderCNP.setEnabled(false);
            NewReaderName.setEnabled(false);
            NewReaderGroup.setEnabled(false);
        }
        
        
        
        
    }//GEN-LAST:event_readerIDCheckBoxActionPerformed

    private void UpdatedReaderByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatedReaderByIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdatedReaderByIDActionPerformed

    private void CheckReaderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckReaderIDActionPerformed
        
         if(CheckReaderID.isSelected()==true)
        {
        int checkReaderID;
        
        try
        {
            checkReaderID=Integer.parseInt(DeletedReaderID.getText());
        }
        catch (NumberFormatException e)
        {
            checkReaderID=-100;
        }
        
        
       
            if(checkReaderID!=-100)
        {
            if(CheckReaderID.isSelected()==true && Integer.parseInt(DeletedReaderID.getText())>0)
            {
                 
                    DeleteReader.setEnabled(true);
                    DeletedReaderID.setEnabled(false);
                  
            }
            else if(CheckReaderID.isSelected()==true)
            {
                DeleteReader.setEnabled(false);
                DeletedReaderID.setEnabled(true);
                CheckReaderID.setSelected(false);
                JOptionPane.showMessageDialog (null, "Reader ID must be higher than 0 ! "
                    , "Error", JOptionPane.WARNING_MESSAGE);
                
            }
            else
            {
                DeleteReader.setEnabled(false);
                DeletedReaderID.setEnabled(true);
            }
        }
        else
        {
                DeleteReader.setEnabled(false);
                DeletedReaderID.setEnabled(true);
                CheckReaderID.setSelected(false);
                
                JOptionPane.showMessageDialog (null, "Invalid reader ID ! \n "
                    , "Error", JOptionPane.WARNING_MESSAGE);
        }
        }
         else  if(CheckReaderID.isSelected()==false)
        {
                DeleteReader.setEnabled(false);
                DeletedReaderID.setEnabled(true);
                CheckReaderID.setSelected(false);
        }
        
        
    }//GEN-LAST:event_CheckReaderIDActionPerformed

    private void DeleteReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteReaderActionPerformed
        try
        {
            ResultSet resultSet=Library.Reader.SearchReaderByID(Integer.parseInt(DeletedReaderID.getText()));
            if(resultSet.next())
            {
                Library.Reader.DeletReaderByID(Integer.parseInt(DeletedReaderID.getText()));
            }
            else
            {
                JOptionPane.showMessageDialog (null, "Reader not found !", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (SQLException ex)
        {
            //System.out.println("Here");
            //Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteReaderActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        BookRemovePanel.setVisible(false);
        BookAddPanel.setVisible(false);
        BookUpdatePanel.setVisible(false);
        HomePanel.setVisible(false);
        ReaderAddPanel.setVisible(false);
        ReaderUpdatePanel.setVisible(false);
        ReaderRemovePanel.setVisible(false);
        Borrow_Return_Panel.setVisible(false);
        Borrow_Return_Panel.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ReaderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReaderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReaderFieldActionPerformed

    private void LendBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LendBoxActionPerformed
        if(LendBox.isSelected()==true)
        {
            ReaderField.setEnabled(false);
            ReturnBox.setSelected(false);
        }
        
        
    }//GEN-LAST:event_LendBoxActionPerformed

    private void ReturnBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnBoxActionPerformed
        if(ReturnBox.isSelected()==true)
        {
            LendBox.setSelected(false);
            ReaderField.setEnabled(true);
        }
        
    }//GEN-LAST:event_ReturnBoxActionPerformed

    private void ActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionActionPerformed
        if(ReturnBox.isSelected()==true)//inverted names
        {
            int readerField;
            int bookField;
            try
            {
                readerField=Integer.parseInt(ReaderField.getText());
                bookField=Integer.parseInt(BookField.getText());
                
                if(readerField<0)
                {
                    JOptionPane.showMessageDialog(null,"Reader ID must be bigger than 0 !","",JOptionPane.WARNING_MESSAGE);
                }
                else if(bookField<0)
                {
                    JOptionPane.showMessageDialog(null,"Book ID must be bigger than 0 !","",JOptionPane.WARNING_MESSAGE);
                }
                else
                {
                    Library.Reader.BorrowBook(readerField, bookField);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,"Invalid reader or book ID !","",JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(LendBox.isSelected()==true)//inverted names
        {
            
            int bookField;
            try
            {
                
                bookField=Integer.parseInt(BookField.getText());
                
                
                if(bookField<0)
                {
                    JOptionPane.showMessageDialog(null,"Reader ID must be bigger than 0 !","",JOptionPane.WARNING_MESSAGE);
                }
                else
                {
                    Library.Reader.ReturnBook(bookField);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,"Invalid book ID !","",JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(LendBox.isSelected()==false && ReturnBox.isSelected()==false)
        {
            JOptionPane.showMessageDialog(null,"Please choose an option !","",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ActionActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        search.setVisible(false);
        search=null;
        
        search=new Search();
        
        search.setLocation(this.getX()+100, this.getY()+200);
        search.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
                
                
            }
        });
        
        
      
        
    }
    
    public static  View view = new View();
    private Search search = new Search();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Action;
    private javax.swing.JMenu Actions;
    private java.awt.Button AddBook;
    private java.awt.Button AddReader;
    private javax.swing.JMenuItem Add_Book;
    private javax.swing.JMenuItem Add_Reader;
    private javax.swing.JMenu Book;
    private javax.swing.JPanel BookAddPanel;
    private javax.swing.JTextField BookAuthor;
    private javax.swing.JTextField BookField;
    private javax.swing.JTextField BookID;
    private javax.swing.JTextField BookName;
    private javax.swing.JPanel BookRemovePanel;
    private javax.swing.JTextField BookType;
    private javax.swing.JPanel BookUpdatePanel;
    private javax.swing.JPanel Borrow_Return_Panel;
    private javax.swing.JCheckBox CheckBookID;
    private javax.swing.JCheckBox CheckBookID1;
    private javax.swing.JCheckBox CheckBoxCNP;
    private javax.swing.JCheckBox CheckBoxID;
    private javax.swing.JCheckBox CheckReaderID;
    private java.awt.Button DeleteBook;
    private java.awt.Button DeleteReader;
    private javax.swing.JTextField DeletedBookID;
    private javax.swing.JTextField DeletedReaderID;
    private javax.swing.JMenuItem Home;
    private javax.swing.JPanel HomePanel;
    private javax.swing.JCheckBox LendBox;
    private javax.swing.JTextField NewBookAuthor;
    private javax.swing.JTextField NewBookID;
    private javax.swing.JTextField NewBookName;
    private javax.swing.JTextField NewBookType;
    private javax.swing.JTextField NewReaderCNP;
    private javax.swing.JTextField NewReaderGroup;
    private javax.swing.JTextField NewReaderID;
    private javax.swing.JTextField NewReaderName;
    private javax.swing.JMenu Options;
    private javax.swing.JMenu Pages;
    private javax.swing.JMenu Reader;
    private javax.swing.JPanel ReaderAddPanel;
    private javax.swing.JTextField ReaderCNP;
    private javax.swing.JTextField ReaderField;
    private javax.swing.JTextField ReaderGroup;
    private javax.swing.JTextField ReaderID;
    private javax.swing.JTextField ReaderName;
    private javax.swing.JPanel ReaderRemovePanel;
    private javax.swing.JPanel ReaderUpdatePanel;
    private javax.swing.JMenuItem Refresh;
    private javax.swing.JMenuItem Remove_Book;
    private javax.swing.JMenuItem Remove_Reader;
    private javax.swing.JCheckBox ReturnBox;
    private java.awt.Button UpdateBook;
    private java.awt.Button UpdateReader;
    private javax.swing.JMenuItem Update_Book;
    private javax.swing.JMenuItem Update_Reader;
    private javax.swing.JTextField UpdatedBookID;
    private javax.swing.JTextField UpdatedReaderByCNP;
    private javax.swing.JTextField UpdatedReaderByID;
    private javax.swing.JMenuItem View;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label15;
    private java.awt.Label label16;
    private java.awt.Label label17;
    private java.awt.Label label18;
    private java.awt.Label label19;
    private java.awt.Label label2;
    private java.awt.Label label20;
    private java.awt.Label label21;
    private java.awt.Label label22;
    private java.awt.Label label23;
    private java.awt.Label label24;
    private java.awt.Label label25;
    private java.awt.Label label26;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JCheckBox readerCNPCheckBox;
    private javax.swing.JCheckBox readerIDCheckBox;
    // End of variables declaration//GEN-END:variables
}
